{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","TodoItem","getStyle","props","todo","completed","checkbox","this","id","title","type","checked","onChange","markComplete","bind","Card","Body","Button","variant","btnStyle","calssName","onClick","delTodo","className","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","About","Fragment","App","axios","delete","then","res","filter","post","data","get","Container","Row","Col","xs","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec27f021.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link\r\n            style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#ffffff',\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Card } from 'react-bootstrap';\r\n\r\n\r\nclass TodoItem extends Component {\r\n\r\n    getStyle = () => {\r\n        return {\r\n            padding: '10px',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : \r\n            'none'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { id, title, completed } = this.props.todo;\r\n        let checkbox;\r\n        if(completed === true){\r\n            checkbox = <input type=\"checkbox\" checked=\"checked\" id={id} onChange={this.props.markComplete.bind(this, id)}  />\r\n        }\r\n        else {\r\n            checkbox = <input type=\"checkbox\" id={id} onChange={this.props.markComplete.bind(this, id)}  />\r\n        }\r\n        return (\r\n            <Card>\r\n                <Card.Body>\r\n                    <div style={this.getStyle()}>\r\n                    {checkbox}{' '}{title}\r\n                    <Button variant=\"danger\" style={btnStyle}calssName=\"active-rounded\" onClick={this.props.delTodo.bind(this, id)}><i className=\"fa fa-trash\"></i></Button>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n// PropTypes\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    border: 'none',\r\n    padding: '5px 12px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    return this.props.todos.map((todo) => (\r\n        <TodoItem key={todo.id} todo={todo} markComplete=\r\n        {this.props.markComplete} delTodo={this.props.delTodo}/>\r\n    ));\r\n  }\r\n}\r\n\r\n// PropTypes\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react'\r\n\r\nexport class AddTodo extends Component {\r\n    state ={\r\n        title: '',\r\n    }\r\n    \r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title: ''});\r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\r\n                <input\r\n                    style={{ flex: '10', padding: '5px'}} \r\n                    type=\"text\" \r\n                    name=\"title\" \r\n                    placeholder=\"Add Todo...\"\r\n                    value={this.state.title}\r\n                    onChange={this.onChange}\r\n                />\r\n                <input \r\n                    type=\"submit\" \r\n                    value=\"submit\"\r\n                    className=\"btn\"\r\n                    style={{flex: '1'}}    \r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is the TodoList app v1.0.0. It is part of a \r\n                React crash course\r\n            </p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/layout/Header';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport About from './components/pages/About';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n    .then(res => this.setState({ todos: res.data }))\n  }\n\n  //Toggle Complete\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map(todo => {\n      if(todo.id === id) {\n        todo.completed = !todo.completed\n      }\n      return todo;\n    })})\n  }\n\n  // Delete Todo\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res => this.setState({ todos: [...this.state.todos.filter\n        (todo => todo.id !== id)] }));\n    \n  }\n\n  // Add Todo\n  addTodo = (title) => {\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title,\n      completed: false\n    })\n    .then(res => this.setState({ todos:\n    [...this.state.todos, res.data] }));\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Container>\n              <Row>\n                <Col></Col>\n                <Col xs={12}>\n                  <Header />\n                  <Route exact path=\"/\" render={props => (\n                    <React.Fragment>\n                      <AddTodo addTodo={this.addTodo}/>\n                      <Todos todos={this.state.todos} markComplete=\n                      {this.markComplete} delTodo={this.delTodo}/>\n                    </React.Fragment>\n                  )} />\n                  <Route path=\"/about\" component={About}/>\n                </Col>\n              </Row>\n            </Container>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}